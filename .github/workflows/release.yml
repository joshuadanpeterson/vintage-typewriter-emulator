name: Create Release
on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:
permissions:
  contents: write
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          echo "No tests directory found. Skipping tests."

      - name: Determine next version
        id: determine_version
        run: |
          git fetch --tags
          if [ $(git tag -l | wc -l) -eq 0 ]; then
            LATEST_TAG=''
          else
            LATEST_TAG=$(git describe --tags --abbrev=0)
          fi
          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_OUTPUT

          if [ -z "$LATEST_TAG" ]; then
            git log --pretty=format:%s > commits.txt
          else
            git log ${LATEST_TAG}..HEAD --pretty=format:%s > commits.txt
          fi

          if grep -q '^BREAKING CHANGE:' commits.txt || grep -q '^[a-zA-Z]\+!:' commits.txt; then
            BUMP="major"
          elif grep -q '^feat:' commits.txt; then
            BUMP="minor"
          else
            BUMP="patch"
          fi
          echo "BUMP=${BUMP}" >> $GITHUB_OUTPUT

          if [ -z "$LATEST_TAG" ]; then
            LATEST_VERSION='0.0.0'
          else
            LATEST_VERSION=${LATEST_TAG#v}
          fi

          IFS='.' read -ra VERSION_PARTS <<< "$LATEST_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}

          case $BUMP in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
              ;;
          esac
          echo "NEW_VERSION=v${NEW_VERSION}" >> $GITHUB_OUTPUT

          # Check if the calculated version already exists
          if git rev-parse v$NEW_VERSION >/dev/null 2>&1; then
            echo "Version v$NEW_VERSION already exists. Incrementing patch version."
            PATCH=$((PATCH + 1))
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
            echo "NEW_VERSION=v${NEW_VERSION}" >> $GITHUB_OUTPUT
          fi

      - name: Generate Changelog
        id: get_changelog
        run: |
          LATEST_TAG=${{ steps.determine_version.outputs.LATEST_TAG }}
          if [ -z "$LATEST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s")
          else
            CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s")
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG.md
        run: |
          NEW_VERSION='${{ steps.determine_version.outputs.NEW_VERSION }}'
          CHANGELOG='${{ steps.get_changelog.outputs.CHANGELOG }}'
          CURRENT_DATE=$(TZ='America/Denver' date +%Y-%m-%d)
          REPO_URL="https://github.com/joshuadanpeterson/vintage-typewriter-emulator"

          format_entry() {
            local version=$1
            local date=$2
            local content=$3
            local prev_version=$4
            echo "## [$version]($REPO_URL/tree/$version) ($date)"
            echo "$content"
            echo
            echo "[Full Changelog]($REPO_URL/compare/$prev_version...$version)"
            echo
          }

          remove_duplicates() {
            echo "$1" | awk '!seen[$0]++'
          }

          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo >> CHANGELOG.md
          elif ! grep -q "^# Changelog" CHANGELOG.md; then
            sed -i '1i# Changelog\n' CHANGELOG.md
          fi

          # Add new version
          NEW_ENTRY=$(format_entry "$NEW_VERSION" "$CURRENT_DATE" "$CHANGELOG" "${{ steps.determine_version.outputs.LATEST_TAG }}")
          echo "$NEW_ENTRY" > temp_changelog.md
          echo >> temp_changelog.md

          prev_version="$NEW_VERSION"
          declare -A processed_versions

          while IFS= read -r line; do
            if [[ $line =~ ^##[[:space:]]+(\[v[0-9]+\.[0-9]+\.[0-9]+\])(.*)$ ]]; then
              version="${BASH_REMATCH[1]}"
              version="${version:1:-1}"
              if [[ -n "${processed_versions[$version]}" ]]; then
                continue
              fi
              processed_versions[$version]=1

              date_part="${BASH_REMATCH[2]}"
              date=$(echo "$date_part" | grep -oP '\(\K[0-9]{4}-[0-9]{2}-[0-9]{2}(?=\))' || echo "Unknown Date")
              
              if [ "$date" != "Unknown Date" ]; then
                date=$(TZ='America/Denver' date -d "$date" +%Y-%m-%d)
              fi
              
              content=$(sed -n "/^## \[$version\]/,/^## \[v[0-9]/{ /^## \[v[0-9]/d; p; }" CHANGELOG.md)
              content=$(echo "$content" | sed '/^\[Full Changelog\]/d' | sed '/^$/N;/^\n$/D')
              content=$(remove_duplicates "$content")
              
              format_entry "$version" "$date" "$content" "$prev_version" >> temp_changelog.md
              
              prev_version="$version"
            fi
          done < CHANGELOG.md

          mv temp_changelog.md CHANGELOG.md

          echo "Updated CHANGELOG.md contents:"
          cat CHANGELOG.md

          if ! grep -q "^# Changelog" CHANGELOG.md || ! grep -q "^## \[v[0-9]\+\.[0-9]\+\.[0-9]\+\]" CHANGELOG.md; then
            echo "Error: CHANGELOG.md formatting verification failed"
            exit 1
          fi

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "docs: update CHANGELOG.md for ${NEW_VERSION} and remove duplicate entries"
          git push

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.determine_version.outputs.NEW_VERSION }}
          release_name: Release ${{ steps.determine_version.outputs.NEW_VERSION }}
          body: |
            ## Changes in this Release

            ${{ steps.get_changelog.outputs.CHANGELOG }}

            For full changelog, see [CHANGELOG.md](https://github.com/joshuadanpeterson/vintage-typewriter-emulator/blob/main/CHANGELOG.md)

            ## Core Features
            - Emulates vintage typewriter sounds for various key presses.
            - Plays different sounds for keys depending on the mode in Vim (normal, insert, visual, etc.).
            - Includes specific sounds for space, enter, backspace, and more.
            - Easily integrates with text editors to enhance your typing experience.

            For more details, please check the [README](https://github.com/joshuadanpeterson/vintage-typewriter-emulator/blob/main/README.md).
          draft: false
          prerelease: false
